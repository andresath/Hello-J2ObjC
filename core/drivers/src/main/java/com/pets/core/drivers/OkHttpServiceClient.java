/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.pets.core.drivers;

import okhttp3.*;
import rx.Observable;
import rx.Subscriber;
import okhttp3.logging.HttpLoggingInterceptor;

import java.util.HashMap;
import java.util.Map;
import java.io.IOException;
import com.pets.core.petstore.data.store.ApiRequest;
import com.pets.core.petstore.data.store.ApiResponse;
import com.pets.core.petstore.data.store.ApiException;
import com.pets.core.petstore.data.store.HttpClient;
import com.pets.core.petstore.data.store.HttpClientUtils;

/**
* Observable Generic HTTP Client.
*
* This should be a Native Implementation of an generic HTTP Client. The client is responsible for
* implementing SSL/Certificate Functionality, as well as any other typical HTTP Client functionality.
* All other logic that this specific to this API will be contained in the ApiClient class.
*
* All actions on the HTTP Client should correctly return observables that properly trigger onError
* with an ApiException when a call fails.
*/
public class OkHttpServiceClient implements HttpClient {

    private final OkHttpClient client;
    private boolean debugging;
    private String certificatePath;

    public OkHttpServiceClient() {
        debugging = true;
        OkHttpClient.Builder clientBuilder = new OkHttpClient.Builder();
        configureClient(clientBuilder);
        client = clientBuilder.build();
    }

    private void configureClient(OkHttpClient.Builder clientBuilder) {
        clientBuilder.followRedirects(true);
        clientBuilder.followSslRedirects(true);
        clientBuilder.retryOnConnectionFailure(true);
//        if (certificatePath) {
//            clientBuilder.sslSocketFactory(new SslCertificates(certificatePath.get()).sslContext().getSocketFactory());
//        }

        if (debugging) {
            HttpLoggingInterceptor logging = new HttpLoggingInterceptor();
            logging.setLevel(HttpLoggingInterceptor.Level.BASIC);
            clientBuilder.addInterceptor(logging);
        }
    }

    public boolean isDebugging() {
        return debugging;
    }

    public void setDebugging(boolean debugging) {
        this.debugging = debugging;
    }

    /**
    * This method makes an HTTP GET request and return response as ApiResponse of Observable.
    *
    * @param endpoint        Endpoint at which to make the POST call (including Query Parameters (i.e. &foo=bar))
    * @param request 		  ApiRequest that will be used to build the final Request
    * @return Observable with ApiResponse value
    */
    public Observable<ApiResponse> get(final String endpoint, final ApiRequest request) {
        return Observable.create(new Observable.OnSubscribe<ApiResponse>() {
            @Override
            public void call(Subscriber subscriber) {
                try {
                    Response response = buildGetRequest(endpoint, request);
                    Headers responseHeaders = response.headers();
                    Map<String, String>headers = new HashMap<String, String>();
                    for (int i = 0; i < responseHeaders.size(); i++) {
                        headers.put(responseHeaders.name(i), responseHeaders.value(i));
                    }
                    ApiResponse<String> apiResponse = new ApiResponse<String>(response.code(), headers, response.body().string());
                    if (response.isSuccessful() && !subscriber.isUnsubscribed()) {
                        subscriber.onNext(apiResponse);
                        subscriber.onCompleted();
                    } else {
                        String errorMsg = String.format("Unsuccessful response returned from: %s. Code: %d, Message: %s", endpoint, response.code(), response.message());
                        ApiException error = new ApiException(errorMsg, response.code(), request, apiResponse);
                        subscriber.onError(error);
                    }
                } catch (IOException e) {
                    String error = String.format("Error occurred during HTTP call to: %s. Message: %s", endpoint, e.getLocalizedMessage());
                    subscriber.onError(new ApiException(error, e.getCause(), request));
                }
            }
        });
    }

    /**
    * This method makes an HTTP POST request and return response as ApiResponse of Observable.
    *
    * @param endpoint        Endpoint at which to make the POST call (including Query Parameters (i.e. &foo=bar))
    * @param request 		  ApiRequest that will be used to build the final Request
    * @return Observable with ApiResponse value
    */
    public Observable<ApiResponse> post(final String endpoint, final ApiRequest request) {
        return Observable.create(new Observable.OnSubscribe<ApiResponse>() {
            @Override
            public void call(Subscriber subscriber) {
                try {
                    Response response = buildGetRequest(endpoint, request);
                    Headers responseHeaders = response.headers();
                    Map<String, String>headers = new HashMap<String, String>();
                    for (int i = 0; i < responseHeaders.size(); i++) {
                        headers.put(responseHeaders.name(i), responseHeaders.value(i));
                    }
                    ApiResponse<ResponseBody> apiResponse = new ApiResponse<ResponseBody>(response.code(), headers, response.body());
                    if (response.isSuccessful() && !subscriber.isUnsubscribed()) {
                        subscriber.onNext(apiResponse);
                        subscriber.onCompleted();
                    } else {
                        String errorMsg = String.format("Unsuccessful response returned from: %s. Code: %d, Message: %s", endpoint, response.code(), response.message());
                        ApiException error = new ApiException(errorMsg, response.code(), request, apiResponse);
                        subscriber.onError(error);
                    }
                } catch (IOException e) {
                    String error = String.format("Error occurred during HTTP call to: %s. Message: %s", endpoint, e.getLocalizedMessage());
                    subscriber.onError(new ApiException(error, e.getCause(), request));
                }
            }
        });
    }

    /**
    * This method makes an HTTP PUT request and return response as ApiResponse of Observable.
    *
    * @param endpoint        Endpoint at which to make the POST call (including Query Parameters (i.e. &foo=bar))
    * @param request 		  ApiRequest that will be used to build the final Request
    * @return Observable with ApiResponse value
    */
    public Observable<ApiResponse> put(final String endpoint, final ApiRequest request) {
        return Observable.create(new Observable.OnSubscribe<ApiResponse>() {
            @Override
            public void call(Subscriber subscriber) {
                try {
                    Response response = buildGetRequest(endpoint, request);
                    Headers responseHeaders = response.headers();
                    Map<String, String>headers = new HashMap<String, String>();
                    for (int i = 0; i < responseHeaders.size(); i++) {
                        headers.put(responseHeaders.name(i), responseHeaders.value(i));
                    }
                    ApiResponse<ResponseBody> apiResponse = new ApiResponse<ResponseBody>(response.code(), headers, response.body());
                    if (response.isSuccessful() && !subscriber.isUnsubscribed()) {
                        subscriber.onNext(apiResponse);
                        subscriber.onCompleted();
                    } else {
                        String errorMsg = String.format("Unsuccessful response returned from: %s. Code: %d, Message: %s", endpoint, response.code(), response.message());
                        ApiException error = new ApiException(errorMsg, response.code(), request, apiResponse);
                        subscriber.onError(error);
                    }
                } catch (IOException e) {
                    String error = String.format("Error occurred during HTTP call to: %s. Message: %s", endpoint, e.getLocalizedMessage());
                    subscriber.onError(new ApiException(error, e.getCause(), request));
                }
            }
        });
    }

    /**
    * This method makes an HTTP DELETE request and return response as ApiResponse of Observable.
    *
    * @param endpoint        Endpoint at which to make the POST call (including Query Parameters (i.e. &foo=bar))
    * @param request 		  ApiRequest that will be used to build the final Request
    * @return Observable with ApiResponse value
    */
    public Observable<ApiResponse> delete(final String endpoint, final ApiRequest request) {
        return Observable.create(new Observable.OnSubscribe<ApiResponse>() {
            @Override
            public void call(Subscriber subscriber) {
                try {
                    Response response = buildDeleteRequest(endpoint, request);
                    Headers responseHeaders = response.headers();
                    Map<String, String>headers = new HashMap<String, String>();
                    for (int i = 0; i < responseHeaders.size(); i++) {
                        headers.put(responseHeaders.name(i), responseHeaders.value(i));
                    }
                    ApiResponse<ResponseBody> apiResponse = new ApiResponse<ResponseBody>(response.code(), headers, response.body());
                    if (response.isSuccessful() && !subscriber.isUnsubscribed()) {
                        subscriber.onNext(apiResponse);
                        subscriber.onCompleted();
                    } else {
                        String errorMsg = String.format("Unsuccessful response returned from: %s. Code: %d, Message: %s", endpoint, response.code(), response.message());
                        ApiException error = new ApiException(errorMsg, response.code(), request, apiResponse);
                        subscriber.onError(error);
                    }
                } catch (IOException e) {
                    String error = String.format("Error occurred during HTTP call to: %s. Message: %s", endpoint, e.getLocalizedMessage());
                    subscriber.onError(new ApiException(error, e.getCause(), request));
                }
            }
        });
    }

    private Response buildGetRequest(String fullEndpointUrl, ApiRequest request) throws IOException {
        Request getHttpRequest = new Request.Builder()
                .url(fullEndpointUrl)
                .headers(Headers.of(request.getHeaders()))
                .build();
//        client.newCall(getHttpRequest).enqueue(new Callback() {
//            @Override public void onFailure(Call call, IOException e) {
//                e.printStackTrace();
//            }
//
//            @Override public void onResponse(Call call, Response response) throws IOException {
//                if (!response.isSuccessful()) throw new ApiException("Unexpected code " + response);
//                ApiResponse<Response> apiResponse = new ApiResponse<Response>(response.code(), response.headers().toMultimap(), response.body());
//                Headers responseHeaders = response.headers();
//                for (int i = 0, size = responseHeaders.size(); i < size; i++) {
//                    System.out.println(responseHeaders.name(i) + ": " + responseHeaders.value(i));
//                }
//
//                System.out.println(response.body().string());
//            }
//        });
        Call call = client.newCall(getHttpRequest);
        Response response = call.execute();

        return response;
    }

    private Response buildPostRequest(String fullEndpointUrl, ApiRequest request) throws IOException {
        MediaType bodyType = MediaType.parse(request.getContentType());
        RequestBody body = RequestBody.create(bodyType, request.getSerializedBody());
        Request postHttpRequest = new Request.Builder()
                .url(fullEndpointUrl)
                .headers(Headers.of(request.getHeaders()))
                .post(body)
                .build();

        Call call = client.newCall(postHttpRequest);
        Response response = call.execute();

        return response;
    }

    private Response buildPutRequest(String fullEndpointUrl, ApiRequest request) throws IOException {
        MediaType bodyType = MediaType.parse(request.getContentType());
        RequestBody body = RequestBody.create(bodyType, request.getSerializedBody());
        Request putHttpRequest = new Request.Builder()
                .url(fullEndpointUrl)
                .headers(Headers.of(request.getHeaders()))
                .put(body)
                .build();

        Call call = client.newCall(putHttpRequest);
        Response response = call.execute();

        return response;
    }

    private Response buildDeleteRequest(String fullEndpointUrl, ApiRequest request) throws IOException {
        MediaType bodyType = MediaType.parse(request.getContentType());
        Request deleteHttpRequest = null;

        if (request.getSerializedBody() != null) {
            RequestBody body = RequestBody.create(bodyType, request.getSerializedBody());
            deleteHttpRequest = new Request.Builder()
                    .url(fullEndpointUrl)
                    .headers(Headers.of(request.getHeaders()))
                    .delete(body)
                    .build();
        } else {
            deleteHttpRequest = new Request.Builder()
                    .url(fullEndpointUrl)
                    .headers(Headers.of(request.getHeaders()))
                    .delete()
                    .build();
        }

        Call call = client.newCall(deleteHttpRequest);
        Response response = call.execute();

        return response;
    }
}