/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.pets.core.petstore.data.store.api;

import com.pets.core.petstore.data.store.ApiClient;
import com.pets.core.petstore.data.store.ApiException;
import com.pets.core.petstore.data.store.ApiResponse;
import com.pets.core.petstore.data.store.ApiRequest;
import com.pets.core.petstore.data.store.HttpClientUtils;
import com.pets.core.petstore.data.store.Pair;
import rx.Observable;
import rx.Observer;
import rx.functions.*;
import rx.exceptions.Exceptions;

import com.pets.core.petstore.data.models.User;

import java.lang.reflect.Type;
import com.google.gson.reflect.TypeToken;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient apiClient;

    public UserApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Create user (Observable)
     * This can only be done by the logged in user.
     * @param body Created user object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return Observable<Object> Observable service call
     * Observable.onError will be called with an ApiException if anything about the Request fails, or it is an unsuccessful response.
     */
    public Observable<Object> createUser(User body) {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            return Observable.error(new ApiException("Missing the required parameter 'body' when calling createUser"));
        }
        

        // create path and map variables
        String localVarPath = "/user".replaceAll("\\{format\\}","json");

        // Turn Query Params into Pairs
        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        // Add all generic header params
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        // Setup Form Params
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        // Add Accept Header(s) (if provided)
        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = HttpClientUtils.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        // Add Content-Type Header(s) (if provided)
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = HttpClientUtils.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };

        // Build final URL for Call
        String endpointWithQuery = apiClient.buildUrl(localVarPath, localVarQueryParams);

        // Build Request
		ApiRequest apiRequest = new ApiRequest("POST", localVarHeaderParams, localVarPostBody, localVarFormParams, localVarQueryParams, localVarAuthNames);
        try {
			apiRequest = apiClient.prepareRequestForCall(apiRequest);
        } catch (ApiException e) {
        	return Observable.error(e);
        }



        // Setup Response mapping to generic DTO Type
        final Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.POST(endpointWithQuery, apiRequest)
            .map(new Func1<ApiResponse, Object>() {
                @Override public Object call(ApiResponse response) {
                    try {
                        return apiClient.handleResponse(response, localVarReturnType);
                    } catch (ApiException e) {
                        throw Exceptions.propagate(e);
                    }
                }
            });

    }

    /**
     * Creates list of users with given input array (Observable)
     * 
     * @param body List of user object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return Observable<Object> Observable service call
     * Observable.onError will be called with an ApiException if anything about the Request fails, or it is an unsuccessful response.
     */
    public Observable<Object> createUsersWithArrayInput(List<User> body) {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            return Observable.error(new ApiException("Missing the required parameter 'body' when calling createUsersWithArrayInput"));
        }
        

        // create path and map variables
        String localVarPath = "/user/createWithArray".replaceAll("\\{format\\}","json");

        // Turn Query Params into Pairs
        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        // Add all generic header params
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        // Setup Form Params
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        // Add Accept Header(s) (if provided)
        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = HttpClientUtils.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        // Add Content-Type Header(s) (if provided)
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = HttpClientUtils.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };

        // Build final URL for Call
        String endpointWithQuery = apiClient.buildUrl(localVarPath, localVarQueryParams);

        // Build Request
		ApiRequest apiRequest = new ApiRequest("POST", localVarHeaderParams, localVarPostBody, localVarFormParams, localVarQueryParams, localVarAuthNames);
        try {
			apiRequest = apiClient.prepareRequestForCall(apiRequest);
        } catch (ApiException e) {
        	return Observable.error(e);
        }



        // Setup Response mapping to generic DTO Type
        final Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.POST(endpointWithQuery, apiRequest)
            .map(new Func1<ApiResponse, Object>() {
                @Override public Object call(ApiResponse response) {
                    try {
                        return apiClient.handleResponse(response, localVarReturnType);
                    } catch (ApiException e) {
                        throw Exceptions.propagate(e);
                    }
                }
            });

    }

    /**
     * Creates list of users with given input array (Observable)
     * 
     * @param body List of user object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return Observable<Object> Observable service call
     * Observable.onError will be called with an ApiException if anything about the Request fails, or it is an unsuccessful response.
     */
    public Observable<Object> createUsersWithListInput(List<User> body) {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            return Observable.error(new ApiException("Missing the required parameter 'body' when calling createUsersWithListInput"));
        }
        

        // create path and map variables
        String localVarPath = "/user/createWithList".replaceAll("\\{format\\}","json");

        // Turn Query Params into Pairs
        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        // Add all generic header params
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        // Setup Form Params
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        // Add Accept Header(s) (if provided)
        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = HttpClientUtils.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        // Add Content-Type Header(s) (if provided)
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = HttpClientUtils.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };

        // Build final URL for Call
        String endpointWithQuery = apiClient.buildUrl(localVarPath, localVarQueryParams);

        // Build Request
		ApiRequest apiRequest = new ApiRequest("POST", localVarHeaderParams, localVarPostBody, localVarFormParams, localVarQueryParams, localVarAuthNames);
        try {
			apiRequest = apiClient.prepareRequestForCall(apiRequest);
        } catch (ApiException e) {
        	return Observable.error(e);
        }



        // Setup Response mapping to generic DTO Type
        final Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.POST(endpointWithQuery, apiRequest)
            .map(new Func1<ApiResponse, Object>() {
                @Override public Object call(ApiResponse response) {
                    try {
                        return apiClient.handleResponse(response, localVarReturnType);
                    } catch (ApiException e) {
                        throw Exceptions.propagate(e);
                    }
                }
            });

    }

    /**
     * Delete user (Observable)
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return Observable<Object> Observable service call
     * Observable.onError will be called with an ApiException if anything about the Request fails, or it is an unsuccessful response.
     */
    public Observable<Object> deleteUser(String username) {
        Object localVarPostBody = null;
        
        // verify the required parameter 'username' is set
        if (username == null) {
            return Observable.error(new ApiException("Missing the required parameter 'username' when calling deleteUser"));
        }
        

        // create path and map variables
        String localVarPath = "/user/{username}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", HttpClientUtils.escapeString(username.toString()));

        // Turn Query Params into Pairs
        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        // Add all generic header params
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        // Setup Form Params
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        // Add Accept Header(s) (if provided)
        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = HttpClientUtils.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        // Add Content-Type Header(s) (if provided)
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = HttpClientUtils.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };

        // Build final URL for Call
        String endpointWithQuery = apiClient.buildUrl(localVarPath, localVarQueryParams);

        // Build Request
		ApiRequest apiRequest = new ApiRequest("DELETE", localVarHeaderParams, localVarPostBody, localVarFormParams, localVarQueryParams, localVarAuthNames);
        try {
			apiRequest = apiClient.prepareRequestForCall(apiRequest);
        } catch (ApiException e) {
        	return Observable.error(e);
        }



        // Setup Response mapping to generic DTO Type
        final Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.DELETE(endpointWithQuery, apiRequest)
            .map(new Func1<ApiResponse, Object>() {
                @Override public Object call(ApiResponse response) {
                    try {
                        return apiClient.handleResponse(response, localVarReturnType);
                    } catch (ApiException e) {
                        throw Exceptions.propagate(e);
                    }
                }
            });

    }

    /**
     * Get user by user name (Observable)
     * 
     * @param username The name that needs to be fetched. Use user1 for testing.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return Observable<User> Observable service call
     * Observable.onError will be called with an ApiException if anything about the Request fails, or it is an unsuccessful response.
     */
    public Observable<User> getUserByName(String username) {
        Object localVarPostBody = null;
        
        // verify the required parameter 'username' is set
        if (username == null) {
            return Observable.error(new ApiException("Missing the required parameter 'username' when calling getUserByName"));
        }
        

        // create path and map variables
        String localVarPath = "/user/{username}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", HttpClientUtils.escapeString(username.toString()));

        // Turn Query Params into Pairs
        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        // Add all generic header params
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        // Setup Form Params
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        // Add Accept Header(s) (if provided)
        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = HttpClientUtils.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        // Add Content-Type Header(s) (if provided)
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = HttpClientUtils.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };

        // Build final URL for Call
        String endpointWithQuery = apiClient.buildUrl(localVarPath, localVarQueryParams);

        // Build Request
		ApiRequest apiRequest = new ApiRequest("GET", localVarHeaderParams, localVarPostBody, localVarFormParams, localVarQueryParams, localVarAuthNames);
        try {
			apiRequest = apiClient.prepareRequestForCall(apiRequest);
        } catch (ApiException e) {
        	return Observable.error(e);
        }



        // Setup Response mapping to DTO Type
        final Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.GET(endpointWithQuery, apiRequest)
            .map(new Func1<ApiResponse, User>() {
                @Override public User call(ApiResponse response) {
                    try {
                        return apiClient.handleResponse(response, localVarReturnType);
                    } catch (ApiException e) {
                        throw Exceptions.propagate(e);
                    }
                }
            });

    }

    /**
     * Logs user into the system (Observable)
     * 
     * @param username The user name for login (required)
     * @param password The password for login in clear text (required)
     * @param callback The callback to be executed when the API call finishes
     * @return Observable<String> Observable service call
     * Observable.onError will be called with an ApiException if anything about the Request fails, or it is an unsuccessful response.
     */
    public Observable<String> loginUser(String username, String password) {
        Object localVarPostBody = null;
        
        // verify the required parameter 'username' is set
        if (username == null) {
            return Observable.error(new ApiException("Missing the required parameter 'username' when calling loginUser"));
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            return Observable.error(new ApiException("Missing the required parameter 'password' when calling loginUser"));
        }
        

        // create path and map variables
        String localVarPath = "/user/login".replaceAll("\\{format\\}","json");

        // Turn Query Params into Pairs
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (username != null)
        localVarQueryParams.addAll(HttpClientUtils.parameterToPairs("", "username", username));
        if (password != null)
        localVarQueryParams.addAll(HttpClientUtils.parameterToPairs("", "password", password));

        // Add all generic header params
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        // Setup Form Params
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        // Add Accept Header(s) (if provided)
        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = HttpClientUtils.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        // Add Content-Type Header(s) (if provided)
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = HttpClientUtils.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };

        // Build final URL for Call
        String endpointWithQuery = apiClient.buildUrl(localVarPath, localVarQueryParams);

        // Build Request
		ApiRequest apiRequest = new ApiRequest("GET", localVarHeaderParams, localVarPostBody, localVarFormParams, localVarQueryParams, localVarAuthNames);
        try {
			apiRequest = apiClient.prepareRequestForCall(apiRequest);
        } catch (ApiException e) {
        	return Observable.error(e);
        }



        // Setup Response mapping to DTO Type
        final Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.GET(endpointWithQuery, apiRequest)
            .map(new Func1<ApiResponse, String>() {
                @Override public String call(ApiResponse response) {
                    try {
                        return apiClient.handleResponse(response, localVarReturnType);
                    } catch (ApiException e) {
                        throw Exceptions.propagate(e);
                    }
                }
            });

    }

    /**
     * Logs out current logged in user session (Observable)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return Observable<Object> Observable service call
     * Observable.onError will be called with an ApiException if anything about the Request fails, or it is an unsuccessful response.
     */
    public Observable<Object> logoutUser() {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/user/logout".replaceAll("\\{format\\}","json");

        // Turn Query Params into Pairs
        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        // Add all generic header params
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        // Setup Form Params
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        // Add Accept Header(s) (if provided)
        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = HttpClientUtils.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        // Add Content-Type Header(s) (if provided)
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = HttpClientUtils.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };

        // Build final URL for Call
        String endpointWithQuery = apiClient.buildUrl(localVarPath, localVarQueryParams);

        // Build Request
		ApiRequest apiRequest = new ApiRequest("GET", localVarHeaderParams, localVarPostBody, localVarFormParams, localVarQueryParams, localVarAuthNames);
        try {
			apiRequest = apiClient.prepareRequestForCall(apiRequest);
        } catch (ApiException e) {
        	return Observable.error(e);
        }



        // Setup Response mapping to generic DTO Type
        final Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.GET(endpointWithQuery, apiRequest)
            .map(new Func1<ApiResponse, Object>() {
                @Override public Object call(ApiResponse response) {
                    try {
                        return apiClient.handleResponse(response, localVarReturnType);
                    } catch (ApiException e) {
                        throw Exceptions.propagate(e);
                    }
                }
            });

    }

    /**
     * Updated user (Observable)
     * This can only be done by the logged in user.
     * @param username name that need to be updated (required)
     * @param body Updated user object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return Observable<Object> Observable service call
     * Observable.onError will be called with an ApiException if anything about the Request fails, or it is an unsuccessful response.
     */
    public Observable<Object> updateUser(String username, User body) {
        Object localVarPostBody = body;
        
        // verify the required parameter 'username' is set
        if (username == null) {
            return Observable.error(new ApiException("Missing the required parameter 'username' when calling updateUser"));
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            return Observable.error(new ApiException("Missing the required parameter 'body' when calling updateUser"));
        }
        

        // create path and map variables
        String localVarPath = "/user/{username}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", HttpClientUtils.escapeString(username.toString()));

        // Turn Query Params into Pairs
        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        // Add all generic header params
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        // Setup Form Params
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        // Add Accept Header(s) (if provided)
        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = HttpClientUtils.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        // Add Content-Type Header(s) (if provided)
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = HttpClientUtils.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };

        // Build final URL for Call
        String endpointWithQuery = apiClient.buildUrl(localVarPath, localVarQueryParams);

        // Build Request
		ApiRequest apiRequest = new ApiRequest("PUT", localVarHeaderParams, localVarPostBody, localVarFormParams, localVarQueryParams, localVarAuthNames);
        try {
			apiRequest = apiClient.prepareRequestForCall(apiRequest);
        } catch (ApiException e) {
        	return Observable.error(e);
        }



        // Setup Response mapping to generic DTO Type
        final Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.PUT(endpointWithQuery, apiRequest)
            .map(new Func1<ApiResponse, Object>() {
                @Override public Object call(ApiResponse response) {
                    try {
                        return apiClient.handleResponse(response, localVarReturnType);
                    } catch (ApiException e) {
                        throw Exceptions.propagate(e);
                    }
                }
            });

    }

}
