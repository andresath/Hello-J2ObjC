/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.pets.core.shared.petstore.data.store;

import java.util.Map;
import java.util.List;

@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-10-27T12:20:26.738-04:00")
public class ApiException extends Exception {
    private int code = 0;
    private Map<String, String> headers;
    private ApiResponse response;
    private ApiRequest request;

    public ApiException() {}

    public ApiException(Throwable throwable) {
        super(throwable);
    }

    public ApiException(String message) {
        super(message);
    }

    public ApiException(String message, Throwable throwable, int code, ApiRequest request, ApiResponse response) {
        super(message, throwable);
        this.code = code;
        this.request = request;
        this.response = response;
    }

	public ApiException(String message, Throwable throwable, ApiRequest request) {
		this(message, throwable, 0, request, null);
	}

    public ApiException(String message, int code, ApiRequest request, ApiResponse response) {
        this(message, (Throwable) null, code, request, response);
    }

    public ApiException(int code, ApiRequest request, ApiResponse response) {
        this((String) null, (Throwable) null, code, request, response);
    }

    public ApiException(String message, ApiRequest request) {
        super(message);
        this.request = request;
    }

    public ApiException(String message, ApiRequest request, ApiResponse response) {
        super(message);
        this.request = request;
        this.response = response;
    }

    public ApiException(String message, ApiResponse response) {
        super(message);
        this.response = response;
    }

    /**
     * Get the HTTP status code.
     *
     * @return HTTP status code
     */
    public int getCode() {
        return code;
    }

    /**
     * Get the Api request.
     *
     * @return ApiRequest
     */
    public ApiRequest getRequest() {
        return request;
    }

    /**
     * Get the Api Response.
     *
     * @return ApiResponse
     */
    public ApiResponse getResponse() {
        return response;
    }

}