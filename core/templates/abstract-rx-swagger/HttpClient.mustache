{{>licenseInfo}}

package {{invokerPackage}};

import java.io.IOException;

import java.util.Map;
import java.util.List;

/**
 * Observable Generic HTTP Client.
 *
 * @param <T> The return type
 */
public interface HttpClient {
    <R> Observable<R> get(String endpoint, Map<String, String> headers, Object postBody, Map<String, Object> formParams);

    <R> Observable<R> post(String endpoint, Map<String, String> headers, Object postBody, Map<String, Object> formParams);

    <R> Observable<R> put(String endpoint, Map<String, String> headers, Object postBody, Map<String, Object> formParams);

    <R> Observable<R> delete(String endpoint, Map<String, String> headers, Object postBody, Map<String, Object> formParams);

    <R> Observable<R> delete(String endpoint, Map<String, String> headers, Object postBody, Map<String, Object> formParams);

    /**
     * This is called when the API call fails.
     *
     * @param e The exception causing the failure
     * @param statusCode Status code of the response if available, otherwise it would be 0
     * @param responseHeaders Headers of the response if available, otherwise it would be null
     */
    void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders);

    /**
     * This is called when the API call succeeded.
     *
     * @param result The result deserialized from response
     * @param statusCode Status code of the response
     * @param responseHeaders Headers of the response
     */
    void onSuccess(T result, int statusCode, Map<String, List<String>> responseHeaders);

    /**
     * This is called when the API upload processing.
     *
     * @param bytesWritten bytes Written
     * @param contentLength content length of request body
     * @param done write end
     */
    void onUploadProgress(long bytesWritten, long contentLength, boolean done);

    /**
     * This is called when the API downlond processing.
     *
     * @param bytesRead bytes Read
     * @param contentLength content lenngth of the response
     * @param done Read end
     */
    void onDownloadProgress(long bytesRead, long contentLength, boolean done);
}
